module typesystemlanguage

imports

	libstratego-lib
	libstratego-gpp
	libstratego-aterm
	libspoofax/core/language
	signatures/TypeSystemLanguage-sig
	runtime/analysis/-
	runtime/nabl/-
	runtime/task/-
	runtime/index/-
	pp/-
  names/names
	check
	desugar
	label
  pp
  pp/TypeSystemLanguage-parenthesize
  instructions

  generate-instruct // instead of generate

// signature
//   constructors
//     I : ID * Prop -> Instruction
//     Ip : ID * Prop * ID -> Instruction

rules // Analysis

	editor-analyze = analyze-all(id, desugar-all, id|<language>)

	editor-save = with(generate-stratego; write-string-to-file); !None()

rules // Editor services

	// Resolves a reference when the user control-clicks or presses F3 in the editor.
	editor-resolve:
		(node, position, ast, path, project-path) -> definition
		where
			definition := <analysis-resolve(|<language>, project-path)> node

	// Returns "hover help" information for a particular node in the editor.
	// For references, this rule is invoked using the resolved term.
	editor-hover:
		(target, position, ast, path, project-path) -> <fail>

	// Completes an identifier when the user presses control-space
	// (the completion identifier in the AST provides additional context information)
	editor-complete:
		(node, position, ast, path, project-path) -> proposals
		where
			proposals := <analysis-propose-completions(|<language>, project-path)> ast

rules // Debugging

	// Prints the abstract syntax ATerm of a selection.
	debug-show-aterm:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"aterm")> path;
			result	 := selected

	// Prints the analyzed annotated abstract syntax ATerm of a selection.
	debug-show-analyzed:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"analyzed.aterm")> path;
			result	 := ast

	debug-show-index-current =
		analysis-debug-show-current-partition(|<language>)

	debug-show-index-all =
		analysis-debug-show-all-partitions(|<language>)

	debug-show-tasks-selection =
		analysis-debug-show-tasks-selection(|<language>)

	debug-reanalyze =
		analysis-debug-reanalyze(|<language>)

rules // code generation

  // Transforms a selection to Stratego
  generate-stratego:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      Module(modname, _) := ast;
      filename := $[src-gen/types/[<guarantee-extension(|"str")> modname]]
    ; {|CurrentModule : rules(CurrentModule := modname); result := <instruct-formulas; to-stratego(|project-path, $[types/[modname]])> selected |}
      

  // When given a tuple (path, string) this writes string into path.
  write-string-to-file =
    ?(filename, string);
    with(
      handle := <fopen> (filename, "w");
      <fputs> (string, handle);
      <fclose> handle
    )

  desugar-service :
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"desugared.ts")> path;
      result   := <desugar-all; strip-annos; parenthesize-TypeSystemLanguage; pp-debug> selected

  desugar-label-service :
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"desugared.ts")> path;
      result   := <desugar-all; label-formulas; strip-annos; parenthesize-TypeSystemLanguage; pp-debug> selected

  desugar-instruct-service :
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"desugared.ts")> path;
      result   := <desugar-all; instruct-formulas; strip-annos; parenthesize-TypeSystemLanguage; pp-debug> selected

  desugar-ast-service :
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"desugared.ts.aterm")> path;
      result   := <desugar-all; strip-annos> selected

  desugar-label-ast-service :
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"desugared.ts.aterm")> path;
      result   := <desugar-all; label-formulas; strip-annos> selected

  desugar-instruct-ast-service :
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"desugared.ts.aterm")> path;
      result   := <desugar-all; instruct-formulas; strip-annos> selected

  // Formats the program using a pretty printer
  format-service:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      ext      := <get-extension> path;
      filename := <guarantee-extension(|$[pp.[ext]])> path;
      result   := <pp-debug> selected

  pp-ts-string =
    prettyprint-example
    ; !V([], <id>)
    ; box2text-string(|80)

  pp-debug :
    ast -> result
    with
       result := <pp-ts-string> ast
    <+ <bottomup(try(not(is-string); not(is-list); not(pp-ts-string); debug(!"cannot pp ")))> ast
    ;  result := ""
