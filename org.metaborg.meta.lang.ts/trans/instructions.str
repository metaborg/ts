module instructions

imports signatures/TypeSystemLanguage-sig

// signature
//   constructors
//     I : ID * Prop -> Instruction
//     Ip : ID * Prop * ID -> Instruction
 
rules
  
  form-vars    = collect-all(?Var(_))
  
  form-varrefs = collect-all(?VarRef(_))

rules

  instruct-formulas =
    alltd(
      TypeRule(id, try(instruct-formula))
    + TypeFunction(id, id, id, try(instruct-formula))
    + Relation(id, id, id, try(instruct-formula))
    )
    
  instruct-formula = 
    instruct-formula(|[]); 
    alltd( \ Id(p, []) -> I(p) \ 
        <+ \ Iad(x, p, []) -> Ia(x, p)  \
        <+ \ Id(p, x) -> Id(p, VarRef(x)) \ 
        <+ \ Iad(y, p, x) -> Iad(y, p, VarRef(x)) \ )
  
  instruct-formula(|dep) :
    True() -> Is([])
    
  instruct-formula(|dep) :
    And(form1, form2) -> Label(l2, Is([i1*, i2*]))
    where Label(l1, Is(i1*)) := <instruct-formula(|dep)> form1
        ; Label(l2, Is(i2*)) := <instruct-formula(|l1)> form2 

  instruct-formula(|dep) :
    Or(form1, form2) -> Label(l, Is([i1*, i2*, I(Bind(Choice(VarRef(l1), VarRef(l2)), Var(l)))]))
    where Label(l1, Is(i1*)) := <instruct-formula(|dep)> form1
        ; Label(l2, Is(i2*)) := <instruct-formula(|dep)> form2 
        ; l := <newname> "or"    
    
  instruct-formula(|dep) :
  	Not(form) -> Label(l', Is([i*, Ia(Var(l'), Not(Return(VarRef(l))))]))
  	where Label(l, Is(i*)) := <instruct-formula(|dep)> form
  	    ; l' := <newname> "not"
    
  instruct-formula(|dep) :
    Else(form, msg, target) -> Label(l, Is([is*, I(Else(Return(VarRef(l)), msg, target))]))
      where Label(l, Is(is*)) := <instruct-formula(|dep)> form

  instruct-formula(|dep) :
    ElseWarning(form, msg, target) -> Label(l, Is([is*, I(ElseWarning(Return(VarRef(l)), msg, target))]))
      where Label(l, Is(is*)) := <instruct-formula(|dep)> form

  instruct-formula(|dep) :
    form@Has(trm, op, Var(x)) -> Label(x, Is([Id(form, dep)]))
  
  instruct-formula(|dep) :
    form@Eq(trm1, trm2) -> Label(l, Is([Iad(Var(l), form, dep)]))
    where l := <newname> "eq"
   
  instruct-formula(|dep) :
    form@Project(_, pat) -> Label(x, Is([Id(form, dep)]))
    where <form-vars> pat => [Var(x)]
        ; l := <newname> "match" 

  instruct-formula(|dep) :
    form@Match(_, pat) -> <fail>
    where debug(!"*** unsupported Match clause")
        
  // instruct-formula(|dep) :
  //   form@Match(_, pat) -> Label(l, Is([Iad(Var(l), form, dep)]))
  //   where <form-vars> pat => []
  //       ; l := <newname> "match"

  instruct-formula(|dep) :
    form@Bind(pat, Var(x)) -> Label(x, Is([Id(form, dep)]))
    
  instruct-formula(|dep) :
    form@Project(_, pat) -> Label(x, Is([Id(form, dep)]))
    where <form-vars> pat => [Var(x)]
    
  // instruct-formula(|dep) :
  //   form@Match(Union(_,_), Var(x)) -> Label(x, Is([Id(form, dep)]))
  //   
  // instruct-formula(|dep) :
  //   form@Match(Choice(_,_), Var(x)) -> Label(x, Is([Id(form, dep)]))
        
  instruct-formula(|dep) : 
  	form@FuncAppl(n, trm, Var(x)) -> Label(x, Is([Id(form, dep)]))

	instruct-formula(|dep) : 
		form@RelationMatch(trm1, rel, trm2) -> Label(l, Is([Iad(Var(l), form, dep)]))
		where l := <newname> "relmatch"
		
	instruct-formula(|dep) : 
		form@RelationStore(trm1, rel, trm2) -> Label(l, Is([Iad(Var(l), form, dep)]))
		where l := <newname> "relstore"
				
